// For JSON block definitions
const createBlockDefinitionsFromJsonArray = (definitions: any[]) => {
  const blocks: { [key: string]: any } = {};
  definitions.forEach((def) => {
    blocks[def.type] = def;
  });
  return blocks;
};

/**
 * Control blocks for ottobit
 */
export const controlBlocks = createBlockDefinitionsFromJsonArray([
  {
    type: "ottobit_repeat",
    message0: "repeat %1 times %2 %3",
    args0: [
      {
        type: "field_number",
        name: "TIMES",
        value: 10,
        min: 1,
        max: 100,
      },
      {
        type: "input_dummy",
      },
      {
        type: "input_statement",
        name: "DO",
      },
    ],
    previousStatement: null,
    nextStatement: null,
    deletable: true,
    movable: true,
    editable: true,
    style: "ottobit_control",
    tooltip: "L·∫∑p l·∫°i c√°c l·ªánh m·ªôt s·ªë l·∫ßn nh·∫•t ƒë·ªãnh",
    helpUrl: "",
  },
  {
    type: "ottobit_repeat_range",
    message0: "repeat %1 From %2 To %3 By %4 %5 %6",
    args0: [
      {
        type: "field_dropdown",
        name: "VAR",
        options: [
          ["i", "i"],
          ["j", "j"],
          ["k", "k"],
          ["count", "count"],
          ["index", "index"],
        ],
      },
      {
        type: "field_number",
        name: "FROM",
        value: 1,
      },
      {
        type: "field_number",
        name: "TO",
        value: 5,
      },
      {
        type: "field_number",
        name: "BY",
        value: 1,
      },
      {
        type: "input_dummy",
      },
      {
        type: "input_statement",
        name: "DO",
      },
    ],
    previousStatement: null,
    nextStatement: null,
    deletable: true,
    movable: true,
    editable: true,
    style: "ottobit_control",
    tooltip: "L·∫∑p v·ªõi bi·∫øn t·ª´ gi√° tr·ªã ƒë·∫ßu ƒë·∫øn gi√° tr·ªã cu·ªëi",
    helpUrl: "",
  },
  {
    type: "ottobit_while",
    message0: "while %1 %2 %3",
    args0: [
      {
        type: "input_value",
        name: "CONDITION",
      },
      {
        type: "input_dummy",
      },
      {
        type: "input_statement",
        name: "DO",
      },
    ],
    previousStatement: null,
    nextStatement: null,
    deletable: true,
    movable: true,
    editable: true,
    style: "ottobit_control",
    tooltip: "L·∫∑p l·∫°i c√°c l·ªánh khi ƒëi·ªÅu ki·ªán c√≤n ƒë√∫ng",
    helpUrl: "",
  },
  {
    type: "ottobit_while_compare",
    message0: "while %1 %2 %3 %4 %5",
    args0: [
      {
        type: "input_value",
        name: "LEFT",
        check: "Number",
      },
      {
        type: "field_dropdown",
        name: "OPERATOR",
        options: [
          ["=", "EQ"],
          ["‚â†", "NEQ"],
          ["<", "LT"],
          ["‚â§", "LTE"],
          [">", "GT"],
          ["‚â•", "GTE"],
        ],
      },
      {
        type: "input_value",
        name: "RIGHT",
        check: "Number",
      },
      {
        type: "input_dummy",
      },
      {
        type: "input_statement",
        name: "DO",
      },
    ],
    previousStatement: null,
    nextStatement: null,
    deletable: true,
    movable: true,
    editable: true,
    style: "ottobit_control",
    tooltip: "L·∫∑p l·∫°i khi ƒëi·ªÅu ki·ªán so s√°nh c√≤n ƒë√∫ng",
    helpUrl: "",
  },
  {
    type: "ottobit_if_expandable",
    message0: "if %1",
    args0: [
      {
        type: "input_value",
        name: "IF0",
        check: "Boolean",
      },
    ],
    message1: "%1",
    args1: [
      {
        type: "input_statement",
        name: "DO0",
      },
    ],
    previousStatement: null,
    nextStatement: null,
    deletable: true,
    movable: true,
    editable: true,
    style: "ottobit_control_blue",
    tooltip: "Kh·ªëi IF c√≥ th·ªÉ m·ªü r·ªông. Click v√†o bi·ªÉu t∆∞·ª£ng b√°nh rƒÉng ƒë·ªÉ th√™m else if ho·∫∑c else",
    helpUrl: "",
    mutator: "ottobit_if_mutator"
  },
  // Boolean value block with dropdown
  {
    type: "ottobit_boolean",
    message0: "%1",
    args0: [
      {
        type: "field_dropdown",
        name: "BOOL",
        options: [
          ["true", "TRUE"],
          ["false", "FALSE"],
        ],
      },
    ],
    output: "Boolean",
    deletable: true,
    movable: true,
    editable: true,
    style: "ottobit_logic",
    tooltip: "Ch·ªçn gi√° tr·ªã logic true ho·∫∑c false",
    helpUrl: "",
  },
  // Logic operators with dropdown - layout ngang (horizontal)
  {
    type: "ottobit_logic_operation",
    message0: "%1 %2 %3",
    args0: [
      {
        type: "input_value",
        name: "LEFT",
        check: "Boolean",
      },
      {
        type: "field_dropdown",
        name: "OP",
        options: [
          ["and", "AND"],
          ["or", "OR"],
        ],
      },
      {
        type: "input_value",
        name: "RIGHT",
        check: "Boolean",
      },
    ],
    inputsInline: true, // üî• K√≠ch ho·∫°t layout ngang
    output: "Boolean",
    deletable: true,
    movable: true,
    editable: true,
    style: "ottobit_logic",
    tooltip: "K·∫øt h·ª£p hai ƒëi·ªÅu ki·ªán v·ªõi to√°n t·ª≠ AND ho·∫∑c OR - layout ngang",
    helpUrl: "",
  },
  // Variable block ƒë∆°n gi·∫£n v·ªõi style compact
  {
    type: "ottobit_variable_i",
    message0: "i",
    output: "Number",
    style: "ottobit_variable",
    tooltip: "Bi·∫øn i",
    helpUrl: "",
    // Th√™m custom CSS class ƒë·ªÉ style nh·ªè g·ªçn
    customContextMenu: false,
  },
  {
    type: "ottobit_logic_compare",
    message0: "%1 %2 %3",
    args0: [
      {
        type: "input_value",
        name: "LEFT",
        check: ["Number", "Boolean"],
      },
      {
        type: "field_dropdown",
        name: "OPERATOR",
        options: [
          ["=", "EQ"],
          ["‚â†", "NEQ"],
          ["<", "LT"],
          ["‚â§", "LTE"],
          [">", "GT"],
          ["‚â•", "GTE"],
        ],
      },
      {
        type: "input_value",
        name: "RIGHT",
        check: ["Number", "Boolean"],
      },
    ],
    inputsInline: true, // üî• Layout ngang cho comparison
    output: "Boolean",
    deletable: true,
    movable: true,
    editable: true,
    style: "ottobit_control",
    tooltip: "So s√°nh hai gi√° tr·ªã ho·∫∑c logic - layout ngang",
    helpUrl: "",
  },
  {
    type: "ottobit_number",
    message0: "%1",
    args0: [
      {
        type: "field_number",
        name: "NUM",
        value: 0,
        precision: 1,
      },
    ],
    output: "Number",
    deletable: true,
    movable: true,
    editable: true,
    style: "field_blocks",
    tooltip: "M·ªôt s·ªë",
    helpUrl: "",
    customContextMenu: false,
  },
  // Simple condition block - ch·ªâ ƒë·ªÉ ch·ª©a gi√° tr·ªã Boolean
  {
    type: "ottobit_condition",
    message0: "%1",
    args0: [
      {
        type: "input_value",
        name: "CONDITION",
        check: "Boolean",
      },
    ],
    output: "Boolean",
    deletable: true,
    movable: true,
    editable: true,
    style: "ottobit_logic",
    tooltip: "Block ƒëi·ªÅu ki·ªán ƒë∆°n gi·∫£n ƒë·ªÉ ch·ª©a gi√° tr·ªã true/false ho·∫∑c k·∫øt qu·∫£ ki·ªÉm tra",
    helpUrl: "",
  },
  // Boolean equals block - so s√°nh 2 gi√° tr·ªã Boolean
  {
    type: "ottobit_boolean_equals",
    message0: "%1 = %2",
    args0: [
      {
        type: "input_value",
        name: "LEFT",
        check: "Boolean",
      },
      {
        type: "input_value",
        name: "RIGHT",
        check: "Boolean",
      },
    ],
    inputsInline: true,
    output: "Boolean",
    deletable: true,
    movable: true,
    editable: true,
    style: "ottobit_control",
    tooltip: "So s√°nh hai gi√° tr·ªã Boolean (true/false) - t∆∞∆°ng t·ª± block = nh∆∞ng ch·ªâ cho Boolean",
    helpUrl: "",
  },
]);

/**
 * All control block definitions
 */
export const blocks = controlBlocks;
