/* Block styling only - clean and focused */
.blocklySvg {
  --otb-primary: #16ab65;
  --otb-muted: #a8c4ba;
}

/* Block appearance */
.blocklyBlockBackground {
  rx: 16px;
  ry: 16px;
}

.blocklyPath {
  stroke: rgba(255, 255, 255, 0.6);
  stroke-width: 3px;
  filter: drop-shadow(0 4px 0 rgba(0, 0, 0, 0.2))
    drop-shadow(0 8px 16px rgba(0, 0, 0, 0.25));
}

.blocklySelected > .blocklyPath {
  stroke: #ffd84d;
  stroke-width: 4px;
}

/* Block text styling */
.blocklyText {
  font-size: 18px !important;
  font-weight: 700 !important;
  font-family: "Inter", "Arial", sans-serif !important;
  fill: #ffffff !important;
}

/* Block fields - Custom styling for number inputs */
.blocklyEditableText > rect {
  rx: 12px !important;
  ry: 12px !important;
  fill: rgba(255, 255, 255, 0.15) !important;
  stroke: rgba(255, 255, 255, 0.3) !important;
  stroke-width: 2px !important;
}

.blocklyEditableText text {
  font-weight: 700 !important;
  font-size: 16px !important;
  fill: #ffffff !important;
  text-anchor: middle !important;
  dominant-baseline: central !important;
}

/* Input field when editing */
.blocklyHtmlInput {
  border: 2px solid rgba(255, 255, 255, 0.5) !important;
  border-radius: 12px !important;
  background: rgba(255, 255, 255, 0.9) !important;
  color: #333 !important;
  font-weight: 700 !important;
  font-size: 16px !important;
  text-align: center !important;
  outline: none !important;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1) !important;
  padding: 8px 12px !important;
  min-height: 20px !important;
}

/* Force number field backgrounds to be transparent */
.blocklyFieldNumber rect,
.blocklyFieldTextInput rect {
  fill: rgba(255, 255, 255, 0.15) !important;
  stroke: rgba(255, 255, 255, 0.3) !important;
  stroke-width: 2px !important;
  rx: 12px !important;
  ry: 12px !important;
}

.blocklyFieldNumber text,
.blocklyFieldTextInput text {
  fill: #ffffff !important;
  font-weight: 700 !important;
  font-size: 16px !important;
}

/* Additional specific styling for all field states */
g[class*="blocklyField"] rect {
  fill: rgba(255, 255, 255, 0.15) !important;
  stroke: rgba(255, 255, 255, 0.3) !important;
  stroke-width: 2px !important;
  rx: 12px !important;
  ry: 12px !important;
}

g[class*="blocklyField"] text {
  fill: #ffffff !important;
  font-weight: 700 !important;
  font-size: 16px !important;
}

/* Dropdown styling */
.blocklyFieldDropdown .blocklyDropdownText::after {
  content: "▾";
  margin-left: 8px;
  font-weight: 900;
}

/* Block images */
.blocklyText image,
.blocklyFieldImage {
  width: 24px !important;
  height: 24px !important;
}

.blocklyFieldImage img {
  width: 24px !important;
  height: 24px !important;
  display: block !important;
  opacity: 1 !important;
}

/* Connection points */
.blocklyConnectionLine {
  stroke-width: 3px !important;
}

.blocklyToolboxCategoryGroup {
  display: block;
  visibility: visible;
  opacity: 1;
}
.blocklyToolboxDiv .blocklyTreeRowContentContainer {
  display: flex;
  align-items: center;
  justify-content: flex-start; /* Left align for text */
  padding: 0 8px;
}
.blocklyFlyoutBackground {
  fill: #fff;
  fill-opacity: 1;
}
.blocklyFlyout .blocklyBlockBackground {
  rx: 16px; /* Bo góc to hơn như hình tham khảo */
  ry: 16px;
  filter: drop-shadow(0 6px 12px rgba(0, 0, 0, 0.2));
}

/* Flyout blocks to hơn và đẹp hơn */
.blocklyFlyout .blocklyText {
  font-size: 18px !important; /* To hơn */
  font-weight: 700 !important; /* Đậm hơn */
  fill: #ffffff !important; /* Text trắng */
}

/* Category styling - show text with icons */
.blocklyTreeRow {
  border-radius: 12px;
  padding: 8px 12px;
  margin: 6px 8px;
  min-height: 40px;
  min-width: auto;
  display: flex;
  align-items: center;
  justify-content: flex-start;
  transition: all 0.3s ease;
  cursor: pointer;
  border: 1px solid rgba(255, 255, 255, 0.8);
  background: transparent;
  position: relative;
}

.blocklyTreeRow:hover {
  border-color: rgba(92, 157, 255, 0.5);
  transform: translateX(2px) scale(1.02);
  background: rgba(92, 157, 255, 0.1);
}

/* Selected state */
.blocklyTreeRow.blocklyTreeRowSelected,
.blocklyTreeRow[aria-selected="true"] {
  background: #5c9dff !important;
  border-color: #5c9dff !important;
  color: white !important;
}

.blocklyTreeRow:active {
  transform: translateX(1px) scale(0.98);
}

/* Category label styling - show text with emoji */
.blocklyTreeLabel {
  position: relative;
  width: auto;
  height: auto;
  display: flex;
  align-items: center;
  justify-content: flex-start;
  font-size: 14px !important;
  font-weight: 600 !important;
  color: #2c3e50;
  overflow: visible;
  text-indent: 0;
  line-height: 1.2;
  white-space: nowrap;
  padding-left: 0; /* Không cần padding vì đã có emoji */
}

/* Selected state - white text cho emoji categories */
.blocklyTreeRowSelected .blocklyTreeLabel,
.blocklyTreeRow[aria-selected="true"] .blocklyTreeLabel {
  color: white !important;
}

/* Flyout background - xanh lá nhẹ */
.blocklyFlyout {
  background-color: #e8f5e8 !important; /* Xanh lá rất nhẹ */
}

.blocklyFlyoutBackground {
  fill: #e8f5e8 !important; /* Xanh lá rất nhẹ */
}

/* Field = pill to hơn và đẹp hơn */
.blocklyEditableText > rect {
  rx: 12px; /* Bo góc to hơn */
  ry: 12px;
  fill: #fff;
  stroke: rgba(0, 0, 0, 0.2); /* Viền rõ hơn */
  stroke-width: 2px;
}
.blocklyEditableText text {
  font-weight: 700 !important; /* Đậm hơn */
  font-size: 16px !important; /* Nhỏ hơn để fit */
  fill: #333 !important; /* Text đen trong field */
  text-anchor: middle !important; /* Center text */
  dominant-baseline: central !important; /* Vertical center */
}
.blocklyHtmlInput {
  border: 2px solid #3498db !important;
  border-radius: 12px !important; /* Bo góc to hơn */
  padding: 8px 12px !important; /* Padding vừa phải */
  font-weight: 700 !important;
  font-size: 16px !important; /* Nhỏ hơn để fit */
  min-height: 20px !important;
  text-align: center !important;
}

/* Dropdown caret rõ ràng */
.blocklyFieldDropdown .blocklyDropdownText::after {
  content: "▾";
  margin-left: 8px;
  font-weight: 900;
}

/* Ẩn scrollbar của flyout để loại bỏ khoảng trắng */
.blocklyFlyoutScrollbar,
.blocklyScrollbarVertical.blocklyFlyoutScrollbar {
  display: none !important;
  visibility: hidden !important;
}

/* Scrollbar & trash nhẹ */
.blocklyScrollbarHandle {
  fill: #cde5da;
}
.blocklyScrollbarBackground:hover + .blocklyScrollbarHandle,
.blocklyScrollbarHandle:hover {
  fill: #a9d6c5;
}

/* Icon nhỏ trong block (FieldImage) to hơn và rõ ràng hơn */
.blocklyFlyout .blocklyIconGroup,
.blocklyWorkspace .blocklyIconGroup {
  transform: translateY(0);
}

/* Images trong blocks to hơn */
.blocklyText image,
.blocklyFieldImage {
  width: 24px !important;
  height: 24px !important;
}

/* Đảm bảo icons trong blocks hiển thị đúng */
.blocklyFieldImage img {
  width: 24px !important;
  height: 24px !important;
  display: block !important;
  opacity: 1 !important;
}

/* Connection points to hơn */
.blocklyConnectionLine {
  stroke-width: 3px !important;
}

/* Workspace grid tinh tế hơn */
.blocklyMainWorkspaceScrollbar {
  opacity: 0.8;
}

/* Trashcan styling - để Blockly tự quản lý vị trí */
.blocklyTrash {
  opacity: 1 !important;
  visibility: visible !important;
  display: block !important;
}

.blocklyTrashBody {
  fill: #e74c3c !important;
  stroke: #c0392b !important;
  stroke-width: 2px !important;
  transition: fill 0.2s ease !important; /* Smooth transition */
}

.blocklyTrashLid {
  fill: #bdc3c7 !important;
  stroke: #95a5a6 !important;
  stroke-width: 1px !important;
  transition: fill 0.2s ease !important; /* Smooth transition */
}

/* Trashcan hover effect - sửa nhấp nháy */
.blocklyTrash:hover .blocklyTrashBody {
  fill: #c0392b !important;
  transition: fill 0.2s ease !important; /* Smooth transition */
}

.blocklyTrash:hover .blocklyTrashLid {
  fill: #95a5a6 !important;
  transition: fill 0.2s ease !important; /* Smooth transition */
}

.blocklyTrash:hover {
  opacity: 1 !important;
  /* Bỏ transform để không gây nhấp nháy */
}

/* SIMPLE STATEMENT SPACING FIX */
.blocklyStatementInput {
  fill: transparent !important;
}

/* TARGET SVG HEIGHT của statement - approach khác */
.blocklyStatement {
  padding-bottom: 0px !important; 
  margin-bottom: 0 !important;
}

/* Target SVG path của statement input - giảm height */
.blocklyStatementInputPath {
  height: auto !important;
  overflow: hidden !important;
}

/* Target statement input body - crop bottom */
.blocklyStatementInputBody {
  height: calc(100% - 4px) !important; /* Cắt bớt 4px ở bottom */
  overflow: hidden !important;
}

.blocklyInputConnection {
  stroke: #666 !important;
  stroke-width: 2px !important;
  fill: transparent !important;
}

/* Connection highlights */
.blocklyHighlightedConnectionPath {
  stroke: #3498db !important;
  stroke-width: 3px !important;
  fill: none !important;
}

/* Dragging connections */
.blocklyDragging .blocklyConnectionLine {
  stroke: #e74c3c !important;
  stroke-width: 3px !important;
}

/* Block connections */
.blocklyConnectionLine {
  stroke: #999 !important;
  stroke-width: 2px !important;
}

/* Previous and next statement connections */
.blocklyPreviousConnection,
.blocklyNextConnection {
  fill: transparent !important;
  stroke: #666 !important;
  stroke-width: 1.5px !important;
}

/* Tối ưu spacing cho tất cả blocks */
.blocklyBlockCanvas .blocklyBlock {
  margin: 0 !important;
}

/* Đảm bảo blocks khít nhau trong statement containers */
.blocklyStatement .blocklyBlock {
  margin-bottom: 1px !important; /* Chỉ để khoảng cách rất nhỏ */
}

/* Loại bỏ extra spacing trong renderers */
.blocklyRenderer .blocklyBlock {
  margin: 0 !important;
  padding: 0 !important;
}

/* Statement input path - khít hoàn toàn */
.blocklyStatementInputPath {
  margin: 0 !important;
  padding: 0 !important; /* Bỏ hoàn toàn padding */
}

/* AGGRESSIVE RENDERER OVERRIDES */
.blocklyStatement .blocklyBlock,
.blocklyInputStatement .blocklyBlock {
  margin: 0 !important;
  margin-top: 0 !important;
  margin-bottom: 0 !important;
  padding: 0 !important;
}

/* Block elements khít nhau */
.blocklyBlockBackground,
.blocklyBlockPath {
  margin: 0 !important;
  padding: 0 !important;
}

/* Statement container optimization */
.blocklyStatementInputContainer {
  margin: 0 !important;
  padding: 0 !important;
  height: auto !important;
  min-height: 0 !important;
}

/* Zelos renderer specific fixes */
.zelos-renderer .blocklyStatement,
.zelos-renderer .blocklyStatementInput {
  margin: 0 !important;
  padding: 0 !important;
}

/* Block spacing trong statement - ZERO SPACING */
.blocklyStatement .blocklyBlock + .blocklyBlock {
  margin-top: 0 !important;
  padding-top: 0 !important;
}
