/**
 * Solution Hint AI Service
 * Generates hints for students working on coding challenges
 */

import { aiService } from "./aiService";

export interface SolutionHintContext {
  challenge: {
    id: string;
    title: string;
    description: string;
    difficulty: string;
    solutionJson?: any;
  };
  studentCode: string;
  attemptCount: number;
  previousHints?: string[];
}

export interface SolutionHint {
  hint: string;
  hintLevel: "conceptual" | "algorithmic" | "detailed";
  encouragement: string;
}

class SolutionHintService {
  /**
   * Generate AI-powered hint for student's submission
   */
  async generateHint(context: SolutionHintContext): Promise<SolutionHint> {
    try {
      // Debug: Log challenge info
      console.log("üîç AI Hint - Challenge:", context.challenge.title);
      console.log("üîç AI Hint - Attempt Count:", context.attemptCount);

      // Send simple user message - backend handles all logic
      const userMessage = `T√¥i ƒëang g·∫∑p kh√≥ khƒÉn v·ªõi th·ª≠ th√°ch "${context.challenge.title}". ƒê√¢y l√† l·∫ßn th·ª≠ th·ª© ${context.attemptCount}. B·∫°n c√≥ th·ªÉ cho t√¥i g·ª£i √Ω kh√¥ng?`;
      
      console.log("üìù AI Hint - User message:", userMessage);

      // Call AI service - backend Otto prompt will handle hint logic
      const response = await aiService.sendMessage(
        "", // No system prompt - backend handles it
        userMessage, // Send only simple user message
        context,
        "solution-hint"
      );

      // Parse response
      const hintLevel = this.determineHintLevel(context.attemptCount);

      return {
        hint: response.content,
        hintLevel,
        encouragement: this.getEncouragement(context.attemptCount),
      };
    } catch (error) {
      console.error("Solution Hint Error:", error);
      throw error;
    }
  }

  /**
   * Determine hint level based on attempt count
   */
  private determineHintLevel(
    attemptCount: number
  ): "conceptual" | "algorithmic" | "detailed" {
    if (attemptCount <= 2) {
      return "conceptual";
    } else if (attemptCount <= 5) {
      return "algorithmic";
    } else {
      return "detailed";
    }
  }

  /**
   * Get encouragement message based on attempt count
   */
  private getEncouragement(attemptCount: number): string {
    if (attemptCount === 1) {
      return "B·∫°n ƒëang l√†m t·ªët l·∫Øm! H√£y th·ª≠ suy nghƒ© v·ªÅ v·∫•n ƒë·ªÅ m·ªôt c√°ch c√≥ h·ªá th·ªëng.";
    } else if (attemptCount <= 3) {
      return "ƒê·ª´ng n·∫£n ch√≠! M·ªói l·∫ßn th·ª≠ l√† m·ªôt b∆∞·ªõc ti·∫øn g·∫ßn h∆°n ƒë·∫øn gi·∫£i ph√°p.";
    } else if (attemptCount <= 5) {
      return "B·∫°n ƒë√£ c·ªë g·∫Øng r·∫•t nhi·ªÅu. H√£y xem g·ª£i √Ω chi ti·∫øt h∆°n nh√©!";
    } else {
      return "Tuy·ªát v·ªùi! B·∫°n ƒë√£ ki√™n tr√¨ ƒë·∫øn t·∫≠n b√¢y gi·ªù. ƒê√¢y l√† h∆∞·ªõng d·∫´n chi ti·∫øt ƒë·ªÉ gi√∫p b·∫°n ho√†n th√†nh.";
    }
  }
}

export const solutionHintService = new SolutionHintService();
